// Service pour g√©rer les interactions avec localStorage (solution simple et fiable)
// Alternative √† JSONBin.io qui n√©cessite maintenant une cl√© API

console.log('üîß Chargement du service jsonbinService.js');

// Valeurs par d√©faut si aucune donn√©e n'est disponible
const getDefaultStats = () => ({
  bateau: { likes: 0, interested: 0 },
  abstrait: { likes: 0, interested: 0 },
  oiseaux: { likes: 0, interested: 0 },
  vase: { likes: 0, interested: 0 },
  beach: { likes: 0, interested: 0 },
  boujie: { likes: 0, interested: 0 },
  collection: { likes: 0, interested: 0 }
});

// Cl√© pour le stockage local
const STORAGE_KEY = 'nart_artwork_stats';

// Fonction pour charger les donn√©es depuis localStorage
const loadInteractionsFromJSONBin = async () => {
  try {
    console.log('üì¶ Chargement des donn√©es depuis localStorage...');
    
    const savedData = localStorage.getItem(STORAGE_KEY);
    
    if (savedData) {
      const parsedData = JSON.parse(savedData);
      console.log('‚úÖ Donn√©es trouv√©es dans localStorage:', parsedData);
      return parsedData;
    } else {
      console.log('üìù Aucune donn√©e trouv√©e, initialisation avec valeurs par d√©faut');
      const defaultStats = getDefaultStats();
      
      // Sauvegarder les valeurs par d√©faut
      localStorage.setItem(STORAGE_KEY, JSON.stringify(defaultStats));
      localStorage.setItem(STORAGE_KEY + '_created', Date.now().toString());
      
      return defaultStats;
    }
  } catch (error) {
    console.error('‚ùå Erreur chargement localStorage:', error);
    return getDefaultStats();
  }
};

// Fonction pour sauvegarder les donn√©es vers localStorage
const saveInteractionsToJSONBin = async (artworkStats) => {
  try {
    console.log('üíæ Sauvegarde dans localStorage...');
    console.log('üìä Donn√©es √† sauvegarder:', artworkStats);
    
    // Sauvegarder les statistiques
    localStorage.setItem(STORAGE_KEY, JSON.stringify(artworkStats));
    localStorage.setItem(STORAGE_KEY + '_updated', Date.now().toString());
    
    console.log('‚úÖ Donn√©es sauvegard√©es avec succ√®s dans localStorage!');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde localStorage:', error);
    return false;
  }
};

// Fonction pour incr√©menter les likes
const incrementLikes = async (artworkId, currentStats) => {
  const newStats = { ...currentStats };
  if (!newStats[artworkId]) {
    newStats[artworkId] = { likes: 0, interested: 0 };
  }
  newStats[artworkId].likes += 1;
  
  console.log('üîÑ Incr√©mentation like pour:', artworkId, 'Nouveau total:', newStats[artworkId].likes);
  await saveInteractionsToJSONBin(newStats);
  return newStats;
};

// Fonction pour incr√©menter les int√©ress√©s
const incrementInterested = async (artworkId, currentStats, message = null) => {
  const newStats = { ...currentStats };
  if (!newStats[artworkId]) {
    newStats[artworkId] = { likes: 0, interested: 0, messages: [] };
  }
  
  // Incr√©menter le compteur d'int√©ress√©s
  newStats[artworkId].interested += 1;
  
  // Ajouter le message s'il existe
  if (message) {
    if (!newStats[artworkId].messages) {
      newStats[artworkId].messages = [];
    }
    newStats[artworkId].messages.push(message);
  }
  
  console.log('üìù Incr√©mentation int√©r√™t pour:', artworkId, 'Nouveau total:', newStats[artworkId].interested);
  await saveInteractionsToJSONBin(newStats);
  return newStats;
};

// Fonction de debug pour v√©rifier l'√©tat
const debugJSONBinState = () => {
  console.log('=== √âTAT STOCKAGE LOCAL DEBUG ===');
  console.log('Donn√©es stock√©es:', localStorage.getItem(STORAGE_KEY));
  console.log('Cr√©√© le:', new Date(parseInt(localStorage.getItem(STORAGE_KEY + '_created'))));
  console.log('Mis √† jour le:', new Date(parseInt(localStorage.getItem(STORAGE_KEY + '_updated'))));
  console.log('================================');
};

// Fonction pour r√©initialiser les donn√©es (utile pour les tests)
const resetStats = () => {
  localStorage.removeItem(STORAGE_KEY);
  localStorage.removeItem(STORAGE_KEY + '_created');
  localStorage.removeItem(STORAGE_KEY + '_updated');
  console.log('üîÑ Donn√©es r√©initialis√©es');
};

// Logs de v√©rification des exports
console.log('‚úÖ Service charg√© avec toutes les fonctions disponibles');

// Export des fonctions individuelles
export { 
  loadInteractionsFromJSONBin, 
  saveInteractionsToJSONBin, 
  incrementLikes, 
  incrementInterested, 
  debugJSONBinState, 
  resetStats 
};

// Export par d√©faut
export default {
  loadInteractionsFromJSONBin,
  saveInteractionsToJSONBin,
  incrementLikes,
  incrementInterested,
  debugJSONBinState,
  resetStats
};
